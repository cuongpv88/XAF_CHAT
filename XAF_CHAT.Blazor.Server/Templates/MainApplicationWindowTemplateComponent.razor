@using Blazored.Toast.Configuration
@using DevExpress.ExpressApp
@using DevExpress.ExpressApp.Blazor
@using DevExpress.ExpressApp.Blazor.Components
@using DevExpress.ExpressApp.Blazor.Templates
@using DevExpress.ExpressApp.Utils
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@using XAF_CHAT.Module.BusinessObjects

@inject NavigationManager NavigationManager

@inherits FrameTemplateComponentBase<MainApplicationWindowTemplate>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                IconType="IconType.Material"
                ShowProgressBar="@true"
                ShowCloseButton="@true" 
                RemoveToastsOnNavigation = "@true">
    <CloseButtonContent>
        <div>
            <span class="myCloseButtonStyleClass">&times;</span>
        </div>
    </CloseButtonContent>
</BlazoredToasts>

<div id="main-window-template-component" class="app h-100 d-flex flex-column">
    <ComponentModelObserver ComponentModel="@FrameTemplate.NavigateBackActionControl.ButtonModel">
        <div class="header d-flex flex-row shadow-sm navbar-dark flex-nowrap @DetailViewHeaderClass @NavigateBackActionHeaderClass">
            <div class="header-left-side d-flex align-items-center ps-2">
                <button onclick="xaf.toggleSideBar()" class="btn-hamburger p-0 btn btn-secondary btn-header">
                    <XafImage ImageName="Hamburger" Size="24" Styles="margin: auto;" />
                </button>
                <div class="header-logo mx-3"></div>
            </div>
            <div class="header-right-side w-100 overflow-hidden d-flex align-items-center ps-4">
                @FrameTemplate.NavigateBackActionControl.GetComponentContent()
                <ViewCaptionComponent WindowCaption="@FrameTemplate" />
                <XAF_CHAT.Blazor.Server.Components.ChatComponent></XAF_CHAT.Blazor.Server.Components.ChatComponent>
                @FrameTemplate.AccountComponent.GetComponentContent()
                <SettingsComponent />
            </div>
        </div>
    </ComponentModelObserver>
    <div class="xaf-flex-auto overflow-hidden d-flex">
        <div class="sidebar d-none d-sm-flex flex-column">
            <div class="xaf-flex-auto overflow-auto">
                @FrameTemplate.ShowNavigationItemActionControl.GetComponentContent()
            </div>
            <div class="about-info mx-3 mb-4">
                @((MarkupString)FrameTemplate.AboutInfoString)
            </div>
        </div>
        <div class="sidebar-sm-shadow" onclick="xaf.toggleSideBar()"></div>
        <div class="main xaf-flex-auto overflow-hidden d-flex flex-column">
            <SizeModeContainer>
                @if(FrameTemplate.IsActionsToolbarVisible && @FrameTemplate.Toolbar.ContainsVisibleActionControl()) {
                    <div class="main-toolbar py-3 px-2 px-sm-3">@FrameTemplate.Toolbar.GetComponentContent()</div>
                }
                <div class="main-content xaf-flex-auto overflow-auto pb-3 px-2 px-sm-3">
                    <ViewSiteComponent View="@FrameTemplate.View" />
                </div>
            </SizeModeContainer>
        </div>
    </div>
</div>
<audio id="notification" src="/media/notification.mp3" />
@code {
    public static RenderFragment Create(MainApplicationWindowTemplate applicationWindowTemplate) => @<MainApplicationWindowTemplateComponent FrameTemplate="@applicationWindowTemplate" />;
    private string DetailViewHeaderClass => FrameTemplate.View is DetailView ? "xaf-detail-view-header" : default;
    private string NavigateBackActionHeaderClass => FrameTemplate.NavigateBackActionControl.Visible ? "xaf-show-navigate-back-action" : default;
    protected override async Task InvokeAfterViewChangedJS() {
        await JSRuntime.InvokeVoidAsync("xaf.closeSideBarIfMobile");
        await base.InvokeAfterViewChangedJS();
    }

    public ApplicationUser CurrentUser { get; set; } = SecuritySystem.CurrentUser as ApplicationUser;
    public string CurrentUserId { get; set; } = SecuritySystem.CurrentUserId.ToString();
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chatHub")).Build();
        await hubConnection.StartAsync();
        hubConnection.On<string, string, string>("ReceiveChatNotification", (message, receiverUserId, senderUserId) =>
        {
            if (receiverUserId.Equals(CurrentUserId))
            {
                JSRuntime.InvokeAsync<string>("PlayAudio", "notification");
                JSRuntime.InvokeVoidAsync("setTitle", message);
                //JSRuntime.InvokeVoidAsync("setLoadingText", message);
                //toastService.ShowSuccess(message);
                //config =>
                //{
                //    config.VisibleStateDuration = 10000;
                //    config.HideTransitionDuration = 500;
                //    config.ShowTransitionDuration = 500;
                //    config.Action = "Chat?";
                //    config.ActionColor = Color.Info;
                //    config.Onclick = snackbar =>
                //    {
                //        _navigationManager.NavigateTo($"chat/{senderUserId}");
                //        return Task.CompletedTask;
                //    };
                //});

            }
        });
    }
}
